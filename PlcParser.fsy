%{
 open Absyn
 open ParAux
%}

%token <int> CSTINT      
%token <string> NAME
%token <bool> CSTBOOL

/*      Unit  Bool  Int  List  Tuple  ->     */
%token  UNIT  BOOL  INT  LIST  TUPLE  ARROW 

/*      =>      fn  end  */
%token  DARROW  FN  END      

/*      var  fun  rec  */
%token  VAR  FUN  REC

/*      if  then  else  */
%token  IF  THEN  ELSE 

/*      !    &&   */
%token  NOT  AND

/*      ::    hd    tl    ise  */
%token  CONS  HEAD  TAIL  ISE                   

/*      print  */
%token  PRINT

/*      +     -      *      /     */
%token  PLUS  MINUS  TIMES  DIV

/*      =   !=   <   <=   */
%token  EQ  NEQ  LT  LTE

/*      (     )     {       }       [       ]       */
%token  LPAR  RPAR  LBRACE  RBRACE  LBRACK  RBRACK

/*      #     ,      :      ;      */
%token  HASH  COMMA  COLON  SEMIC

%token EOF


%right SEMIC ARROW
%nonassoc IF
%left ELSE              
%left AND
%left EQ NEQ
%left LT LTE
%right CONS
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HEAD TAIL ISE PRINT NAME
%left HASH      

%start Main
%type <Absyn.expr> Main 

%%

/*  Add production rules below */
Main:
  Prog EOF  { $1 }
;

Prog:
    Expr                {  $1  }
  | VAR NAME EQ Expr SEMIC Prog     {  Let ($2, $4, $6)  }
  | FUN NAME Args EQ Expr SEMIC Prog    { Let ($2, makeAnon $3 $5, $7)}
  | FUN REC NAME Args COLON Type EQ Expr SEMIC Prog { makeFun $3 $4 $6 $8 $10 }
;

Expr:
    AtExpr                       { $1                    }
  | AppExpr                      { $1                    }
  | IF Expr THEN Expr ELSE Expr  { If ($2, $4, $6)       }
  | NOT   Expr                   { Prim1 ("!", $2)       }
  | MINUS Expr                   { Prim1 ("-", $2)       }
  | HEAD Expr                    { Prim1 ("hd", $2)      }
  | TAIL Expr                    { Prim1 ("tl", $2)      }
  | PRINT Expr                   { Prim1 ("print", $2)   }
  | ISE Expr                     { Prim1 ("ise", $2)     }
  | Expr PLUS  Expr              { Prim2 ("+",  $1, $3)  }
  | Expr MINUS Expr              { Prim2 ("-",  $1, $3)  }
  | Expr TIMES Expr              { Prim2 ("*",  $1, $3)  }
  | Expr DIV   Expr              { Prim2 ("/",  $1, $3)  } 
  | Expr EQ    Expr              { Prim2 ("=",  $1, $3)  }
  | Expr NEQ   Expr              { Prim2 ("!=", $1, $3)  }
  | Expr LT    Expr              { Prim2 ("<",  $1, $3)  }
  | Expr LTE   Expr              { Prim2 ("<=", $1, $3)  }
  | Expr AND   Expr              { Prim2 ("&&", $1, $3)  }
  | Expr CONS  Expr              { Prim2 ("::", $1, $3)  }
  | Expr SEMIC Expr              { Prim2 (";",  $1, $3)  }
  | Expr HASH  CSTINT            { Sel ($1, $3)          }
;

AtExpr:
    Const              { $1       }
  | NAME               { Var $1   }
  | LBRACE Prog RBRACE { $2       }
  | LPAR Expr RPAR     { $2       }
  | LPAR Comps RPAR    { Tuple $2 }
  | FN Args DARROW Expr END  { makeAnon $2 $4 }
;

AppExpr:
    AtExpr AtExpr   { Call ($1, $2) }
  | AppExpr AtExpr  { Call ($1, $2) }
;

Const:
    CSTINT    { ConI ($1) }
  | CSTBOOL   { ConB ($1) }
  | LPAR RPAR { Tuple []  }
  | LPAR LBRACK RBRACK COLON Type RPAR  { EList $5 }
;

Comps:
    Expr COMMA Expr   { [$1; $3] }
  | Expr COMMA Comps  { $1 :: $3 }
;

Args:
    LPAR RPAR           { []   }  
  | LPAR Params RPAR    { $2   }
;

Params:
    TypedVar                 { $1::[] }
  | TypedVar COMMA Params    { $1 :: $3 }
;

TypedVar:
    NAME COLON Type   { ($1, $3) }
;

Type:
    AtType                    { $1            }
  | Type ARROW Type           { FunT ($1, $3) }
  | TUPLE LBRACK Types RBRACK { TupT $3       }
  | LIST LBRACK Type RBRACK   { LisT $3       }
;

AtType:
    INT             { IntT    }  
  | BOOL            { BooT   }
  | UNIT            { TupT [] }
  | LPAR Type RPAR  { $2      }
;

Types:
    Type COMMA Type   { [$1; $3] }
  | Type COMMA Types  { $1 :: $3 }
;